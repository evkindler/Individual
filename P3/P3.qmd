---
title: "P3"
format: html
editor: visual
---

## Load Libraries

```{r}
library(tidyverse)
library(here)
library(knitr)
library(srvyr)
library(mlogit)
library(caret)
library(pscl)

here("code",
     "mlogit_helpers.R") |>
  source()
```

## Load Datasets

```{r}
hh_data <- here("data",
                "NHTS",
                "hhpub.csv") |>
  read_csv(show_col_types = FALSE) |>
  filter(TRAVDAY != "01",
          TRAVDAY != "07")

person_data <- here("data",
                    "NHTS",
                    "perpub.csv") |>
  read_csv(show_col_types = FALSE) |>
  filter(TRAVDAY != "01",
          TRAVDAY != "07")

trip_data <- here("data",
                    "NHTS",
                    "trippub.csv") |>
  read_csv(show_col_types = FALSE)  |>
  filter(TRAVDAY != "01",
          TRAVDAY != "07") |>
  select(HOUSEID,
         PERSONID,
         TDTRPNUM,
         TRIPPURP,
         WHYFROM,
         WHYTO,
         TRPTRANS, 
         R_AGE,
         EDUC,
         WTTRDFIN)
```

## Link Unlinked Trips

```{r}

# identify transfers
trip_data <- trip_data |>
  mutate(transfer_trip = WHYTO == "07" | WHYFROM == "07")

# select only transfers
transfer_trips <- trip_data |>
  filter(transfer_trip) |>
  filter(WHYTO != WHYFROM) # remove trips that begin AND end with a transfer

# changes the destination for transfers to the final destination
next_destination <- c(transfer_trips$WHYTO[2:nrow(transfer_trips)], "last")

transfer_trips <- transfer_trips |>
  mutate(next_destination = next_destination) |>
  mutate(WHYTO = ifelse(WHYTO == "07", next_destination, WHYTO)) |>
  filter(WHYFROM != "07") |>
  select(-next_destination)

#merge data back to the rest of the trip_data set
trip_data <- trip_data |>
  filter(!transfer_trip) |>
  rbind(transfer_trips) |>
  select(-TRIPPURP, -TRPTRANS, -transfer_trip)
```

## Construct Trip Purposes

```{r}
exercise <- c("16")



trip_data <- trip_data |>
  mutate(purpose = case_when(WHYTO %in% exercise ~ "Workout",
                             TRUE ~ "Non-Workout"))
```

## Summarize Trip Purposes

```{r}
trip_data |>
  group_by(purpose) |>
  summarise(`Number of trips (unweighted)` = n()) |>
  mutate(`Percent of trips (unweighted)` = 
           100 * `Number of trips (unweighted)`/
           sum(`Number of trips (unweighted)`)) |>
  arrange(desc(`Percent of trips (unweighted)`)) |>
  kable(format.args = list(big.mark = ","), digits = 0)
```

```{r}
trip_data |>
  as_survey_design(weights = WTTRDFIN) |>
  group_by(purpose) |>
  survey_tally() |>
  mutate(`Percent of trips (weighted)` =  100*n / sum(n)) |>
  rename(`Number of trips (weighted)` = n) |>
  select(purpose, 
         `Number of trips (weighted)`,
         `Percent of trips (weighted)`) |>
  arrange(desc(`Percent of trips (weighted)`)) |>
  kable(format.args = list(big.mark = ","), digits = 0)
```

## **Select and construct predictor variables**

```{r}
n_seniors <- person_data |>
  mutate(is_senior = R_AGE > 64) |>
  group_by(HOUSEID) |>
  summarise(n_seniors = sum(is_senior, na.rm = TRUE))

travel_exercise <- person_data |>
  mutate(
    is_exercise_biking = BIKE4EX > 0,
    is_exercise_walking = suppressWarnings(as.numeric(WALK4EX)) > 0
  ) |>
  group_by(HOUSEID) |>
  summarise(
    bike_exercise = sum(is_exercise_biking, na.rm = TRUE),
    walk_exercise = sum(is_exercise_walking, na.rm = TRUE)
  ) |>
  mutate(total_travel_exercise = bike_exercise + walk_exercise)

medical_condition_reduces_travel <- person_data |>
  mutate(is_reduced = as.numeric(CONDTRAV) == 1) |>
  group_by(HOUSEID) |>
  summarise(medical_condition_reduces_travel = sum(is_reduced, na.rm = TRUE))

health_opinion <- person_data |>
  mutate(considers_themselves_healthy = as.numeric(HEALTH) %in% c(1, 2, 3)) |>
  group_by(HOUSEID) |>
  summarise(health_opinion = sum(considers_themselves_healthy, na.rm = TRUE))

physically_active <- person_data |>
  mutate(does_physical_activities = as.numeric(PHYACT) %in% c(2, 3)) |>
  group_by(HOUSEID) |>
  summarise(physically_active = sum(does_physical_activities, na.rm = TRUE))  

hh_data <- hh_data |>
  mutate(veh_avail = case_when(
    HHVEHCNT == 0 ~ "Zero",
    DRVRCNT > HHVEHCNT ~ "Insuff.",
    TRUE ~ "Suff."
  )) |>
  mutate(HHFAMINC = as.numeric(HHFAMINC)) |>
  filter(HHFAMINC > 0) |>
  mutate(income = case_when(
    HHFAMINC < 4 ~ "low",
    HHFAMINC < 5 & HHSIZE > 1 ~ "low",
    HHFAMINC < 6 & HHSIZE > 3 ~ "low",
    HHFAMINC < 7 & HHSIZE > 5 ~ "low",
    HHFAMINC < 8 & HHSIZE > 7 ~ "low",
    HHFAMINC > 8 ~ "high",
    TRUE ~ "middle"
  )) |>
  mutate(income = factor(income, levels = c("low", "middle", "high"))) |>
  left_join(n_seniors, by = "HOUSEID") |>
  left_join(travel_exercise, by = "HOUSEID") |>
  left_join(medical_condition_reduces_travel, by = "HOUSEID") |>
  left_join(health_opinion, by = "HOUSEID") |>
  left_join(physically_active, by = "HOUSEID") |>
  select(HOUSEID,
         HHSIZE,
         WRKCOUNT,
         n_seniors,
         veh_avail,
         income,
         total_travel_exercise, 
         medical_condition_reduces_travel,
         health_opinion,
         physically_active)
```

```{r}
people <- person_data |>
  select(HOUSEID, PERSONID, R_SEX, R_AGE) |>
  mutate(female = R_SEX == "02") |>
  inner_join(hh_data)
```

```{r}
exercise_trips <- trip_data |>
  filter(purpose == "Workout") |>
  group_by(HOUSEID, PERSONID) |>
  summarise(exercise_trips = n())

people <- people |>
  left_join(exercise_trips) |>
  replace_na(list(exercise_trips = 0)) |>
  mutate(income = factor(income, levels = c("low", "middle", "high")))
```

## Data Visualization

```{r}
ggplot(people) +
  geom_histogram(aes(x = exercise_trips),
                 binwidth = 1,
                 color = "gray",
                 fill = "lightgreen") +
  scale_x_continuous(name = "Number of exercise trips",
                     breaks = seq(0, 12, by=1)) +
  scale_y_continuous(name = "Number of workers in sample") +
  theme_minimal()
```

```{r}
people |>
  summarise(`Average count of exercise trips` = mean(exercise_trips),
            `Standard deviation` = sd(exercise_trips)) |>
  kable(digits = 3)
```

```{r}
table(people$exercise_trips)
```

# Estimate Model

## Zero-Inflated Poisson Regression

```{r}
exercise_model_simple <- zeroinfl(exercise_trips ~ 
                                    n_seniors + 
                                    WRKCOUNT +                          
                                    veh_avail +                          
                                    income +
                                    total_travel_exercise +
                                    female,
                                  data = people, dist = "negbin")
summary(exercise_model_simple)
```

```{r}
exercise_model <- zeroinfl(exercise_trips ~ 
                          n_seniors + 
                          WRKCOUNT +                          
                          veh_avail +                          
                          income +          
                          total_travel_exercise +
                          medical_condition_reduces_travel +
                          health_opinion +
                          physically_active +
                          female,
                        data = people,    
                        dist = "negbin")  

summary(exercise_model)
```

```{r}
tibble(Variable = c("Constant",
                    "Number of household seniors",
                    "Number of household workers",
                    "Sufficient vehicle household",
                    "Zero vehicle household",
                    "Middle income",
                    "High income",
                    "Female",
                    "Part-time"),
       `Poisson model` = hbw_model_2$coefficients,
       `Poisson p-value` = summary(hbw_model_2)$coefficients[,4],
       `Zero-inf count` = hbw_model_3$coefficients$count,
       `Zero-inf count p` = summary(hbw_model_3)$coefficients$count[,4],
       `Zero-inf zero` = hbw_model_3$coefficients$zero,
       `Zero-inf zero p` = summary(hbw_model_3)$coefficients$zero[,4]) |>
  kable(digits = 3)
```

```{r}
exercise_model <- tibble(observed = exercise_model$model$exercise_trips, 
                      predicted = exercise_model$fitted.values)

ggplot(hbw_check_3) +   
  geom_jitter(aes(x = observed,                  
                  y = predicted),               
              color = "lightgreen",               
              alpha = 0.1,               
              size = 0.1) +   
  scale_x_continuous(name = "Number of observed trips per person",
                     limits = c(-1, 12.5),
                     breaks = seq(0, 12, by = 1)) +   
  scale_y_continuous(name = "Number of predicted trips per person",
                     limits = c(0, 2),
                     breaks = seq(0, 2, by = 0.25)) +
  theme_minimal()
```

```{r}
hbw_check_3 <- hbw_check_3 |>
  mutate(observed_cat = case_when(observed == 0 ~ "Zero",
                                  observed == 1 ~ "One",
                                  observed == 2 ~ "Two",
                                  TRUE ~ "Three_plus"),
         predicted_cat = case_when(round(predicted) == 0 ~ "Zero",
                                   round(predicted) == 1 ~ "One",
                                   round(predicted) == 2 ~ "Two",
                                   TRUE ~ "Three_plus")) |>
  mutate(observed_cat = factor(observed_cat,
                               levels = c("Zero",
                                          "One",
                                          "Two",
                                          "Three_plus")),
         predicted_cat = factor(predicted_cat,
                                levels = c("Zero",
                                           "One",
                                           "Two",
                                           "Three_plus")))

confusionMatrix(hbw_check_3$predicted_cat, hbw_check_3$observed_cat)
```

## 
